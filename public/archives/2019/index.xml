<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2019 on 码夫庄园</title>
    <link>http://www.mafool.com/archives/2019/</link>
    <description>Recent content in 2019 on 码夫庄园</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>版权所有</copyright>
    <lastBuildDate>Thu, 19 Dec 2019 00:00:00 +0800</lastBuildDate>
    
        <atom:link href="http://www.mafool.com/archives/2019/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go并发1-并发模型</title>
      <link>http://www.mafool.com/post/1585677184/</link>
      <pubDate>Thu, 19 Dec 2019 00:00:00 +0800</pubDate>
      
      <guid>http://www.mafool.com/post/1585677184/</guid>
      <description>[TOC] 一. 并发概念 1. 多核CPU 单核CPU主频接近4GHz时遇到瓶颈(能耗和散热),所以2005年4月Intel推出第一次双核奔腾CPU。 多核CP</description>
    </item>
    
    <item>
      <title>Go并发2-同步编程</title>
      <link>http://www.mafool.com/post/1585677428/</link>
      <pubDate>Thu, 19 Dec 2019 00:00:00 +0800</pubDate>
      
      <guid>http://www.mafool.com/post/1585677428/</guid>
      <description>[TOC] Sync包简述： Package sync provides basic synchronization primitives such as mutual exclusion locks. Other than the Once and WaitGroup types, most are intended for use by low-level library &amp;gt; routines. Higher-level synchronization is better done via channels and communication. Values containing the types defined in this package should not be copied. Sync包同步提供基本的</description>
    </item>
    
    <item>
      <title>Cgo编程笔记 - 2.1 快速入门</title>
      <link>http://www.mafool.com/posts/c6f2df1d75efd06ab8cd9809a60975a4ch201/</link>
      <pubDate>Mon, 16 Dec 2019 18:17:06 +0800</pubDate>
      
      <guid>http://www.mafool.com/posts/c6f2df1d75efd06ab8cd9809a60975a4ch201/</guid>
      <description>本文为Go学习笔记，感谢《Go语言高级编程》开源图书 2.1 快速入门 本节我们将通过一系列由浅入深的小例子来快速掌握CGO的基本用法。 2.1.1 最简CGO程</description>
    </item>
    
    <item>
      <title>Cgo编程笔记 - 2.10 编译和链接参数</title>
      <link>http://www.mafool.com/posts/c6f2df1d75efd06ab8cd9809a60975a4ch210/</link>
      <pubDate>Mon, 16 Dec 2019 18:17:06 +0800</pubDate>
      
      <guid>http://www.mafool.com/posts/c6f2df1d75efd06ab8cd9809a60975a4ch210/</guid>
      <description>本文为Go学习笔记，感谢《Go语言高级编程》开源图书 2.10 编译和链接参数 编译和链接参数是每一个C/C++程序员需要经常面对的问题。构建每一个C/</description>
    </item>
    
    <item>
      <title>Cgo编程笔记 - 2.2 CGO基础</title>
      <link>http://www.mafool.com/posts/c6f2df1d75efd06ab8cd9809a60975a4ch202/</link>
      <pubDate>Mon, 16 Dec 2019 18:17:06 +0800</pubDate>
      
      <guid>http://www.mafool.com/posts/c6f2df1d75efd06ab8cd9809a60975a4ch202/</guid>
      <description>本文为Go学习笔记，感谢《Go语言高级编程》开源图书 2.2 CGO基础 要使用CGO特性，需要安装C/C++构建工具链，在macOS和Linux下是</description>
    </item>
    
    <item>
      <title>Cgo编程笔记 - 2.3 类型转换</title>
      <link>http://www.mafool.com/posts/c6f2df1d75efd06ab8cd9809a60975a4ch203/</link>
      <pubDate>Mon, 16 Dec 2019 18:17:06 +0800</pubDate>
      
      <guid>http://www.mafool.com/posts/c6f2df1d75efd06ab8cd9809a60975a4ch203/</guid>
      <description>本文为Go学习笔记，感谢《Go语言高级编程》开源图书 2.3 类型转换 最初CGO是为了达到方便从Go语言函数调用C语言函数（用C语言实现Go语言声明</description>
    </item>
    
    <item>
      <title>Cgo编程笔记 - 2.4 函数调用</title>
      <link>http://www.mafool.com/posts/c6f2df1d75efd06ab8cd9809a60975a4ch204/</link>
      <pubDate>Mon, 16 Dec 2019 18:17:06 +0800</pubDate>
      
      <guid>http://www.mafool.com/posts/c6f2df1d75efd06ab8cd9809a60975a4ch204/</guid>
      <description>本文为Go学习笔记，感谢《Go语言高级编程》开源图书 2.4 函数调用 函数是C语言编程的核心，通过CGO技术我们不仅仅可以在Go语言中调用C语言函数</description>
    </item>
    
    <item>
      <title>Cgo编程笔记 - 2.5 内部机制</title>
      <link>http://www.mafool.com/posts/c6f2df1d75efd06ab8cd9809a60975a4ch205/</link>
      <pubDate>Mon, 16 Dec 2019 18:17:06 +0800</pubDate>
      
      <guid>http://www.mafool.com/posts/c6f2df1d75efd06ab8cd9809a60975a4ch205/</guid>
      <description>本文为Go学习笔记，感谢《Go语言高级编程》开源图书 2.5 内部机制 对于刚刚接触CGO用户来说，CGO的很多特性类似魔法。CGO特性主要是通过一个</description>
    </item>
    
    <item>
      <title>Cgo编程笔记 - 2.6 实战: 封装qsort</title>
      <link>http://www.mafool.com/posts/c6f2df1d75efd06ab8cd9809a60975a4ch206/</link>
      <pubDate>Mon, 16 Dec 2019 18:17:06 +0800</pubDate>
      
      <guid>http://www.mafool.com/posts/c6f2df1d75efd06ab8cd9809a60975a4ch206/</guid>
      <description>本文为Go学习笔记，感谢《Go语言高级编程》开源图书 2.6 实战: 封装qsort qsort快速排序函数是C语言的高阶函数，支持用于自定义排序比较函</description>
    </item>
    
    <item>
      <title>Cgo编程笔记 - 2.7 CGO内存模型</title>
      <link>http://www.mafool.com/posts/c6f2df1d75efd06ab8cd9809a60975a4ch207/</link>
      <pubDate>Mon, 16 Dec 2019 18:17:06 +0800</pubDate>
      
      <guid>http://www.mafool.com/posts/c6f2df1d75efd06ab8cd9809a60975a4ch207/</guid>
      <description>本文为Go学习笔记，感谢《Go语言高级编程》开源图书 2.7 CGO内存模型 CGO是架接Go语言和C语言的桥梁，它使二者在二进制接口层面实现了互通，</description>
    </item>
    
    <item>
      <title>Cgo编程笔记 - 2.8 C&#43;&#43; 类包装</title>
      <link>http://www.mafool.com/posts/c6f2df1d75efd06ab8cd9809a60975a4ch208/</link>
      <pubDate>Mon, 16 Dec 2019 18:17:06 +0800</pubDate>
      
      <guid>http://www.mafool.com/posts/c6f2df1d75efd06ab8cd9809a60975a4ch208/</guid>
      <description>本文为Go学习笔记，感谢《Go语言高级编程》开源图书 2.8 C++ 类包装 CGO是C语言和Go语言之间的桥梁，原则上无法直接支持C++的类。CGO不支持</description>
    </item>
    
    <item>
      <title>Cgo编程笔记 - 2.9 静态库和动态库</title>
      <link>http://www.mafool.com/posts/c6f2df1d75efd06ab8cd9809a60975a4ch209/</link>
      <pubDate>Mon, 16 Dec 2019 18:17:06 +0800</pubDate>
      
      <guid>http://www.mafool.com/posts/c6f2df1d75efd06ab8cd9809a60975a4ch209/</guid>
      <description>本文为Go学习笔记，感谢《Go语言高级编程》开源图书 2.9 静态库和动态库 CGO在使用C/C++资源的时候一般有三种形式：直接使用源码；链接静态库</description>
    </item>
    
    <item>
      <title>Go分布式笔记 - 6.1 编译和链接参数</title>
      <link>http://www.mafool.com/posts/c6f2df1d75efd06ab8cd9809a60975a4ch601/</link>
      <pubDate>Mon, 16 Dec 2019 18:17:06 +0800</pubDate>
      
      <guid>http://www.mafool.com/posts/c6f2df1d75efd06ab8cd9809a60975a4ch601/</guid>
      <description>本文为Go学习笔记，感谢《Go语言高级编程》开源图书 6.1 分布式id生成器 有时我们需要能够生成类似MySQL自增ID这样不断增大，同时又不会重复</description>
    </item>
    
    <item>
      <title>Go汇编笔记 - 3.1 汇编入门</title>
      <link>http://www.mafool.com/posts/c6f2df1d75efd06ab8cd9809a60975a4ch301/</link>
      <pubDate>Mon, 16 Dec 2019 18:17:06 +0800</pubDate>
      
      <guid>http://www.mafool.com/posts/c6f2df1d75efd06ab8cd9809a60975a4ch301/</guid>
      <description>Go汇编程序 Go汇编程序无法独立使用,必须以Go包的方式组织;且至少要有一个Go文件指明当前包名等基本包信息；如果Go汇编代码中的变量和函数</description>
    </item>
    
    <item>
      <title>Go汇编笔记 - 3.2 计算机结构</title>
      <link>http://www.mafool.com/posts/c6f2df1d75efd06ab8cd9809a60975a4ch302/</link>
      <pubDate>Mon, 16 Dec 2019 18:17:06 +0800</pubDate>
      
      <guid>http://www.mafool.com/posts/c6f2df1d75efd06ab8cd9809a60975a4ch302/</guid>
      <description>3.2 计算机结构 汇编语言是直面计算机的编程语言，因此理解计算机结构是掌握汇编语言的前提。当前流行的计算机基本采用的是冯·诺伊曼计算机体系结构（在</description>
    </item>
    
    <item>
      <title>Go汇编笔记 - 3.4 函数</title>
      <link>http://www.mafool.com/posts/c6f2df1d75efd06ab8cd9809a60975a4ch304/</link>
      <pubDate>Mon, 16 Dec 2019 18:17:06 +0800</pubDate>
      
      <guid>http://www.mafool.com/posts/c6f2df1d75efd06ab8cd9809a60975a4ch304/</guid>
      <description>3.4 函数 终于到函数了！因为Go汇编语言中，可以也建议通过Go语言来定义全局变量，那么剩下的也就是函数了。只有掌握了汇编函数的基本用法，才能真正</description>
    </item>
    
    <item>
      <title>Git - 搭建Gitlab</title>
      <link>http://www.mafool.com/posts/ac0ed12649b48c40b6bdaa9e07f11039/</link>
      <pubDate>Thu, 12 Dec 2019 00:29:18 +0800</pubDate>
      
      <guid>http://www.mafool.com/posts/ac0ed12649b48c40b6bdaa9e07f11039/</guid>
      <description>Gitlab官网： https://about.gitlab.com/ Docker镜像： https://hub.docker.com/_/gitlab-community-edition 1. 创建GitLab目录 为了数据的操作安全，建议创建data、config、logs三个数据卷。 1 $ mkdir</description>
    </item>
    
    <item>
      <title>CAP定理和分布式数据库管理系统</title>
      <link>http://www.mafool.com/post/1585838490/</link>
      <pubDate>Mon, 11 Nov 2019 00:00:00 +0800</pubDate>
      
      <guid>http://www.mafool.com/post/1585838490/</guid>
      <description>过去，当我们想存储更多数据或提高处理能力时，通常的选择是垂直扩展（获得功能更强大的计算机）或进一步优化现有代码库。但是，随着并行处理和分布式</description>
    </item>
    
    <item>
      <title>Go并发3-Channel进程通信</title>
      <link>http://www.mafool.com/post/1585855719/</link>
      <pubDate>Tue, 08 Oct 2019 00:00:00 +0800</pubDate>
      
      <guid>http://www.mafool.com/post/1585855719/</guid>
      <description>不同于传统的多线程并发模型使用共享内存来实现线程间通信的方式，golang 的哲学是通过 channel 进行协程(goroutine)之间的通信来实现数据共</description>
    </item>
    
    <item>
      <title>Go并发4-Context</title>
      <link>http://www.mafool.com/post/1585856050/</link>
      <pubDate>Mon, 07 Oct 2019 00:00:00 +0800</pubDate>
      
      <guid>http://www.mafool.com/post/1585856050/</guid>
      <description>关于Context： 在WebServer中，每个请求都对应一个goroutine，同时还会启动若干goroutine去处理后端业务，如数据库</description>
    </item>
    
    <item>
      <title>Docker搭建Harbor私有仓库</title>
      <link>http://www.mafool.com/post/1585679557/</link>
      <pubDate>Sun, 08 Sep 2019 00:00:00 +0800</pubDate>
      
      <guid>http://www.mafool.com/post/1585679557/</guid>
      <description>前言 Harbor是由VMware公司开源的企业级的Docker Registry管理项目，它包括权限管理(RBAC)、LDAP、日志审核、管理</description>
    </item>
    
    <item>
      <title>Go Mod依赖管理</title>
      <link>http://www.mafool.com/post/1585676161/</link>
      <pubDate>Wed, 14 Aug 2019 00:00:00 +0800</pubDate>
      
      <guid>http://www.mafool.com/post/1585676161/</guid>
      <description>一. 发展历史 GOPATH时代：所有代码都放到GOPATH下，对于没有任何外部依赖管理（淘汰） Vendor时代：vendor目录下的包会被优先</description>
    </item>
    
    <item>
      <title>十大经典排序01 - 冒泡排序</title>
      <link>http://www.mafool.com/2019/07/%E5%8D%81%E5%A4%A7%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F01-%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Sun, 28 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>http://www.mafool.com/2019/07/%E5%8D%81%E5%A4%A7%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F01-%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</guid>
      <description>算法介绍 冒泡排序（Bubble Sort）也是一种简单直观的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们</description>
    </item>
    
    <item>
      <title>十大经典排序02 - 选择排序</title>
      <link>http://www.mafool.com/2019/07/%E5%8D%81%E5%A4%A7%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F02-%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Sun, 28 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>http://www.mafool.com/2019/07/%E5%8D%81%E5%A4%A7%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F02-%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/</guid>
      <description>算法介绍 选择排序是一种简单直观的排序算法，无论什么数据进去都是 O(n²) 的时间复杂度。所以用到它的时候，数据规模越小越好。唯一的好处可能就是</description>
    </item>
    
    <item>
      <title>十大经典排序03 - 插入排序</title>
      <link>http://www.mafool.com/2019/07/%E5%8D%81%E5%A4%A7%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F03-%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Sun, 28 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>http://www.mafool.com/2019/07/%E5%8D%81%E5%A4%A7%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F03-%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/</guid>
      <description>算法介绍 插入排序的代码实现虽然没有冒泡排序和选择排序那么简单粗暴，但它的原理应该是最容易理解的了，因为只要打过扑克牌的人都应该能够秒懂。插入</description>
    </item>
    
    <item>
      <title>十大经典排序04 - 希尔排序</title>
      <link>http://www.mafool.com/2019/07/%E5%8D%81%E5%A4%A7%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F04-%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Sun, 28 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>http://www.mafool.com/2019/07/%E5%8D%81%E5%A4%A7%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F04-%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F/</guid>
      <description>算法介绍 希尔排序，也称递减增量排序算法，是插入排序的一种更高效的改进版本。但希尔排序是非稳定排序算法。 希尔排序是基于插入排序的以下两点性质而</description>
    </item>
    
    <item>
      <title>十大经典排序05 - 归并排序</title>
      <link>http://www.mafool.com/2019/07/%E5%8D%81%E5%A4%A7%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F05-%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Sun, 28 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>http://www.mafool.com/2019/07/%E5%8D%81%E5%A4%A7%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F05-%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/</guid>
      <description>算法介绍 归并排序（Merge sort）是建立在归并操作上的一种有效的排序算法。该算法是采用分治法（Divide and Conquer）的一个非常典</description>
    </item>
    
    <item>
      <title>十大经典排序06 - 快速排序</title>
      <link>http://www.mafool.com/2019/07/%E5%8D%81%E5%A4%A7%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F06-%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Sun, 28 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>http://www.mafool.com/2019/07/%E5%8D%81%E5%A4%A7%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F06-%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</guid>
      <description>算法介绍 快速排序是由东尼·霍尔所发展的一种排序算法。在平均状况下，排序 n 个项目要 Ο(nlogn) 次比较。在最坏状况下则需要 Ο(n2) 次比较，</description>
    </item>
    
    <item>
      <title>十大经典排序07 - 堆排序</title>
      <link>http://www.mafool.com/2019/07/%E5%8D%81%E5%A4%A7%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F07-%E5%A0%86%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Sun, 28 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>http://www.mafool.com/2019/07/%E5%8D%81%E5%A4%A7%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F07-%E5%A0%86%E6%8E%92%E5%BA%8F/</guid>
      <description>算法介绍 堆排序（Heapsort）是指利用堆这种数据结构所设计的一种排序算法。堆积是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点</description>
    </item>
    
    <item>
      <title>十大经典排序08 - 计数排序</title>
      <link>http://www.mafool.com/2019/07/%E5%8D%81%E5%A4%A7%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F08-%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Sun, 28 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>http://www.mafool.com/2019/07/%E5%8D%81%E5%A4%A7%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F08-%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F/</guid>
      <description>算法介绍 计数排序的核心在于将输入的数据值转化为键存储在额外开辟的数组空间中。作为一种线性时间复杂度的排序，计数排序要求输入的数据必须是有确定</description>
    </item>
    
    <item>
      <title>十大经典排序09 - 桶排序</title>
      <link>http://www.mafool.com/2019/07/%E5%8D%81%E5%A4%A7%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F09-%E6%A1%B6%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Sun, 28 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>http://www.mafool.com/2019/07/%E5%8D%81%E5%A4%A7%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F09-%E6%A1%B6%E6%8E%92%E5%BA%8F/</guid>
      <description>算法介绍 桶排序是计数排序的升级版。它利用了函数的映射关系，高效与否的关键就在于这个映射函数的确定。为了使桶排序更加高效，我们需要做到这两点：</description>
    </item>
    
    <item>
      <title>十大经典排序10 - 基数排序</title>
      <link>http://www.mafool.com/2019/07/%E5%8D%81%E5%A4%A7%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F10-%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Sun, 28 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>http://www.mafool.com/2019/07/%E5%8D%81%E5%A4%A7%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F10-%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F/</guid>
      <description>算法介绍 基数排序是一种非比较型整数排序算法，其原理是将整数按位数切割成不同的数字，然后按每个位数分别比较。由于整数也可以表达字符串（比如名字</description>
    </item>
    
    <item>
      <title>Mysql分表分库1 - Mycat安装与配置</title>
      <link>http://www.mafool.com/post/1585906994/</link>
      <pubDate>Mon, 15 Jul 2019 00:00:00 +0800</pubDate>
      
      <guid>http://www.mafool.com/post/1585906994/</guid>
      <description>一. Mycat安装 Mycat是一款数据库分库分表中间件。 1. 安装依赖项 安装JDK1.7+ 安装Mysql(略), 建议安装mysql8.0以下版本</description>
    </item>
    
    <item>
      <title>Mysql分表分库2 - Mycat实战演练</title>
      <link>http://www.mafool.com/post/1585907144/</link>
      <pubDate>Sat, 13 Jul 2019 00:00:00 +0800</pubDate>
      
      <guid>http://www.mafool.com/post/1585907144/</guid>
      <description>一. 配置规则 1. 分片方式 分片 连续分片 离散分片 优点 扩容无需迁移数据范围条件查询消耗资源少 并发访问能力增强范围条件查询性能提升 缺点 存在数据热点的可</description>
    </item>
    
    <item>
      <title>分布式理论(一) - CAP定理</title>
      <link>http://www.mafool.com/post/1585839366/</link>
      <pubDate>Sat, 06 Jul 2019 00:00:00 +0800</pubDate>
      
      <guid>http://www.mafool.com/post/1585839366/</guid>
      <description>前言 CAP原则又称CAP定理，指的是在一个分布式系统中，Consistency（一致性）、 Availability（可用性）、Partiti</description>
    </item>
    
    <item>
      <title>分布式理论(二) - BASE理论</title>
      <link>http://www.mafool.com/post/1585838938/</link>
      <pubDate>Fri, 05 Jul 2019 00:00:00 +0800</pubDate>
      
      <guid>http://www.mafool.com/post/1585838938/</guid>
      <description>前言 BASE理论是由eBay架构师提出的。BASE是对CAP中一致性和可用性权衡的结果，其来源于对大规模互联网分布式系统实践的总结，是基于C</description>
    </item>
    
    <item>
      <title>分布式理论(三) - 2PC协议</title>
      <link>http://www.mafool.com/post/1585839040/</link>
      <pubDate>Thu, 04 Jul 2019 00:00:00 +0800</pubDate>
      
      <guid>http://www.mafool.com/post/1585839040/</guid>
      <description>前言 由于BASE理论需要在一致性和可用性方面做出权衡，因此涌现了很多关于一致性的算法和协议。其中比较著名的有二阶提交协议（2 Phase Commitment Protoc</description>
    </item>
    
    <item>
      <title>分布式理论(四) - 3PC协议</title>
      <link>http://www.mafool.com/post/1585839114/</link>
      <pubDate>Wed, 03 Jul 2019 00:00:00 +0800</pubDate>
      
      <guid>http://www.mafool.com/post/1585839114/</guid>
      <description>分布式理论(四) - 3PC协议 前言 由于二阶段提交存在着诸如同步阻塞、单点问题、脑裂等缺陷。所以，研究者们在二阶段提交的基础上做了改进，提出了三</description>
    </item>
    
    <item>
      <title>分布式理论(五) 一致性算法Paxos</title>
      <link>http://www.mafool.com/post/1585839221/</link>
      <pubDate>Tue, 02 Jul 2019 00:00:00 +0800</pubDate>
      
      <guid>http://www.mafool.com/post/1585839221/</guid>
      <description>前言 世界上只有一种一致性算法，就是 Paxos。出自一位 Google 大神之口。Paxos 也是出名的 晦涩难懂，推理过程极其复杂。 Paxos 有点类似之前说的 2PC，</description>
    </item>
    
    <item>
      <title>分布式理论(六) - 一致性协议Raft</title>
      <link>http://www.mafool.com/post/1585839270/</link>
      <pubDate>Mon, 01 Jul 2019 00:00:00 +0800</pubDate>
      
      <guid>http://www.mafool.com/post/1585839270/</guid>
      <description>分布式理论(六) - 一致性协议Raft 前言 Raft 也是一个 一致性算法，和 Paxos 目标相同。但它还有另一个名字 - 易于理解的一致性算法。Paxos 和 Raft 都是为了</description>
    </item>
    
    <item>
      <title>Kafka面试自测系列1</title>
      <link>http://www.mafool.com/post/1585721646/</link>
      <pubDate>Wed, 08 May 2019 00:00:00 +0800</pubDate>
      
      <guid>http://www.mafool.com/post/1585721646/</guid>
      <description>面试题，不仅是面试指南，更是自我知识检测手段 1.什么是kafka Kafka是分布式发布-订阅消息系统，它最初是由LinkedIn公司开发的，</description>
    </item>
    
    <item>
      <title>Kafka面试自测系列2</title>
      <link>http://www.mafool.com/post/1585721666/</link>
      <pubDate>Wed, 08 May 2019 00:00:00 +0800</pubDate>
      
      <guid>http://www.mafool.com/post/1585721666/</guid>
      <description>面试题，不仅是面试指南，更是自我知识检测手段 1.Kafka 的设计时什么样的呢？ Kafka 将消息以 topic 为单位进行归纳 将向 Kafka topic 发布消息的程序成为 producers. 将预订 topics 并消费消息的</description>
    </item>
    
    <item>
      <title>Kafka面试自测系列3</title>
      <link>http://www.mafool.com/post/1585721669/</link>
      <pubDate>Wed, 08 May 2019 00:00:00 +0800</pubDate>
      
      <guid>http://www.mafool.com/post/1585721669/</guid>
      <description>面试题，不仅是面试指南，更是自我知识检测手段 问题1：什么是Apache Kafka? 答：Apache Kafka是一个发布 - 订阅开源消息代理应用程序。这个</description>
    </item>
    
    <item>
      <title>Nginx自测 - 课后练习题</title>
      <link>http://www.mafool.com/post/1585725105/</link>
      <pubDate>Wed, 08 May 2019 00:00:00 +0800</pubDate>
      
      <guid>http://www.mafool.com/post/1585725105/</guid>
      <description>1、什么是Nginx? Nginx是一款开源的、高性能的HTTP服务器、反向代理服务器和邮件代理服务器,具有负载均衡器和HTTP缓存的能力。 N</description>
    </item>
    
    <item>
      <title>Nginx面试自测系列3</title>
      <link>http://www.mafool.com/post/1585725111/</link>
      <pubDate>Wed, 08 May 2019 00:00:00 +0800</pubDate>
      
      <guid>http://www.mafool.com/post/1585725111/</guid>
      <description>Nginx有哪些功能 http代理和反向代理、负载均衡、web缓存。 1、负载均衡主要有轮询、加权轮询和IP Hash三种策略，扩展策略主要是通过</description>
    </item>
    
    <item>
      <title>Redis面试汇总</title>
      <link>http://www.mafool.com/post/1585724939/</link>
      <pubDate>Wed, 08 May 2019 00:00:00 +0800</pubDate>
      
      <guid>http://www.mafool.com/post/1585724939/</guid>
      <description>1、什么是Redis？ Redis本质上是一个Key-Value类型的内存数据库。很像memcached，整个数据库统统加载在内存当中进行操作</description>
    </item>
    
    <item>
      <title>Gomock单元测试</title>
      <link>http://www.mafool.com/posts/2f086c092ed75ec827a508d5daea97cd/</link>
      <pubDate>Sat, 13 Apr 2019 00:31:46 +0800</pubDate>
      
      <guid>http://www.mafool.com/posts/2f086c092ed75ec827a508d5daea97cd/</guid>
      <description>使用 Gomock 进行单元测试 在实际项目中，需要进行单元测试的时候。却往往发现有一大堆依赖项。这时候就是 Gomock 大显身手的时候了 Gomock 是 Go 语言的一个 mock 框架，官方的</description>
    </item>
    
    <item>
      <title>Linux - 实现免密登录</title>
      <link>http://www.mafool.com/posts/bdbe76b547376a30e6d68f62f36d397b/</link>
      <pubDate>Thu, 11 Apr 2019 13:19:13 +0800</pubDate>
      
      <guid>http://www.mafool.com/posts/bdbe76b547376a30e6d68f62f36d397b/</guid>
      <description>一. 生成密钥对 如果本地已存在密钥文件，则可跳过该步骤（可与git等工具共享密钥文件）。 在本地生成~/.ssh/id_rsa(密钥)和~/.s</description>
    </item>
    
    <item>
      <title>Redis实现主从复制</title>
      <link>http://www.mafool.com/post/1585819764/</link>
      <pubDate>Wed, 10 Apr 2019 00:00:00 +0800</pubDate>
      
      <guid>http://www.mafool.com/post/1585819764/</guid>
      <description>一. 配置主从概述 主从复制(Replication)：也叫主从同步，它是将Redis主服务器的数据同步到任意数量的从服务器上，同步使用的是发布</description>
    </item>
    
    <item>
      <title>Go精编100道题</title>
      <link>http://www.mafool.com/post/1585726239/</link>
      <pubDate>Tue, 09 Apr 2019 00:00:00 +0800</pubDate>
      
      <guid>http://www.mafool.com/post/1585726239/</guid>
      <description>Golang精编100题 能力模型 级别 模型 初级 primary 熟悉基本语法，能够看懂代码的意图； 在他人指导下能够完成用户故事的开发，编写的代码符合Clean</description>
    </item>
    
    <item>
      <title>Go面试自测系列</title>
      <link>http://www.mafool.com/post/1585725972/</link>
      <pubDate>Tue, 09 Apr 2019 00:00:00 +0800</pubDate>
      
      <guid>http://www.mafool.com/post/1585725972/</guid>
      <description>2、struct能不能比较 因为是强类型语言，所以不同类型的结构不能作比较，但是同一类型的实例值是可以比较的，实例不可以比较，因为是指针类型 4</description>
    </item>
    
    <item>
      <title>Mysql面试题收录</title>
      <link>http://www.mafool.com/post/1585726446/</link>
      <pubDate>Tue, 09 Apr 2019 00:00:00 +0800</pubDate>
      
      <guid>http://www.mafool.com/post/1585726446/</guid>
      <description>事务四大特性 原子性(Atomicity) ：一个事务中的所有操作，要么全部完成，要么全部不完成。事务在执行过程中发生错误，会被回滚（Rollb</description>
    </item>
    
    <item>
      <title>区块链分布式存储：生态大数据的存储新模式</title>
      <link>http://www.mafool.com/post/1585834756/</link>
      <pubDate>Tue, 26 Mar 2019 00:00:00 +0800</pubDate>
      
      <guid>http://www.mafool.com/post/1585834756/</guid>
      <description>前言 区块链，当之无愧的2019最靓的词，在科技领域闪闪发亮，在实体行业星光熠熠。 2019年的1024讲话，让区块链这个词焕然一新，以前它总是</description>
    </item>
    
    <item>
      <title>「转」iface 和 eface 的区别是什么</title>
      <link>http://www.mafool.com/post/1585590231003/</link>
      <pubDate>Sat, 16 Mar 2019 00:00:00 +0800</pubDate>
      
      <guid>http://www.mafool.com/post/1585590231003/</guid>
      <description>iface 和 eface 都是 Go 中描述接口的底层结构体，区别在于 iface 描述的接口包含方法，而 eface 则是不包含任何方法的空接口：interface{}。 从源码层面看一下：</description>
    </item>
    
    <item>
      <title>「转」如何用 interface 实现多态</title>
      <link>http://www.mafool.com/post/1585590231005/</link>
      <pubDate>Sat, 16 Mar 2019 00:00:00 +0800</pubDate>
      
      <guid>http://www.mafool.com/post/1585590231005/</guid>
      <description>Go 语言并没有设计诸如虚函数、纯虚函数、继承、多重继承等概念，但它通过接口却非常优雅地支持了面向对象的特性。 多态是一种运行期的行为，它有以下几</description>
    </item>
    
    <item>
      <title>「转」接口的动态类型和动态值</title>
      <link>http://www.mafool.com/post/1585590231006/</link>
      <pubDate>Sat, 16 Mar 2019 00:00:00 +0800</pubDate>
      
      <guid>http://www.mafool.com/post/1585590231006/</guid>
      <description>从源码里可以看到：iface包含两个字段：tab 是接口表指针，指向类型信息；data 是数据指针，则指向具体的数据。它们分别被称为动态类型和动</description>
    </item>
    
    <item>
      <title>「转」接口的构造过程是怎样的</title>
      <link>http://www.mafool.com/post/1585590231007/</link>
      <pubDate>Sat, 16 Mar 2019 00:00:00 +0800</pubDate>
      
      <guid>http://www.mafool.com/post/1585590231007/</guid>
      <description>我们已经看过了 iface 和 eface 的源码，知道 iface 最重要的是 itab 和 _type。 为了研究清楚接口是如何构造的，接下来我会拿起汇编的武器，还原背后的真相。 来看一个</description>
    </item>
    
    <item>
      <title>值接收者和指针接收者的区别</title>
      <link>http://www.mafool.com/post/1585590231004/</link>
      <pubDate>Sat, 16 Mar 2019 00:00:00 +0800</pubDate>
      
      <guid>http://www.mafool.com/post/1585590231004/</guid>
      <description>方法 结构体变量和结构体对象，可以任意调用结构体(值接受者或指针接受者)方法。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 type demo struct{} // 值接受 func (demo) foo() { fmt.Println(&amp;#34;FOO&amp;#34;) } // 指</description>
    </item>
    
    <item>
      <title>Go语言变量逃逸分析</title>
      <link>http://www.mafool.com/posts/21a9dcd7220eb509dbc8e49fee882300/</link>
      <pubDate>Fri, 15 Mar 2019 00:59:07 +0800</pubDate>
      
      <guid>http://www.mafool.com/posts/21a9dcd7220eb509dbc8e49fee882300/</guid>
      <description>Go 内存逃逸详细分析 Slice 怪异现象分析实例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 package main import ( &amp;#34;fmt&amp;#34; ) func main(){ s := []byte(&amp;#34;&amp;#34;) s1 := append(s, &amp;#39;a&amp;#39;) s2 := append(s, &amp;#39;b&amp;#39;) // 如果有此行，打印的结果是 a b，否</description>
    </item>
    
    <item>
      <title>TOML配置文件管理</title>
      <link>http://www.mafool.com/posts/d8411bdf00046a3195c31dd15e76a472/</link>
      <pubDate>Fri, 15 Feb 2019 01:07:06 +0800</pubDate>
      
      <guid>http://www.mafool.com/posts/d8411bdf00046a3195c31dd15e76a472/</guid>
      <description>配置工具的选择 一个项目通常是有很多配置的，比如PHP的php.ini文件、Nginx的server.conf文件，那么Golang的项目又适</description>
    </item>
    
    <item>
      <title>Mysql配置文件管理</title>
      <link>http://www.mafool.com/post/1585906809/</link>
      <pubDate>Sun, 03 Feb 2019 00:00:00 +0800</pubDate>
      
      <guid>http://www.mafool.com/post/1585906809/</guid>
      <description>一. 配置管理 1. 查看配置文件路径： mysql会使用以下优先级去加载配置文件。 1 $ mysql --help|grep my.cnf 2.查看启动配置项： 包含服务目录、插件、数据、日志目录和</description>
    </item>
    
    <item>
      <title>Nginx笔记 - URL重写</title>
      <link>http://www.mafool.com/posts/6002acef2ec39912a9491a62a269c8bb/</link>
      <pubDate>Sun, 13 Jan 2019 14:34:59 +0800</pubDate>
      
      <guid>http://www.mafool.com/posts/6002acef2ec39912a9491a62a269c8bb/</guid>
      <description>URL重写 URL重写是指将一个URL请求重新写成网站可以处理的另一个URL的过程。如将http://www.demo.com/product</description>
    </item>
    
    <item>
      <title>Nginx笔记 - 反向代理</title>
      <link>http://www.mafool.com/posts/9988bc1712a93bf24869c8d46a841045/</link>
      <pubDate>Sun, 13 Jan 2019 14:34:59 +0800</pubDate>
      
      <guid>http://www.mafool.com/posts/9988bc1712a93bf24869c8d46a841045/</guid>
      <description>一. 正向代理 正向代理是一种客户端代理，即代理完成客户端请求的工作，如使用V P N科学上网，访问Google，就是正向代理，正向代理不是本文的重</description>
    </item>
    
    <item>
      <title>Nginx笔记 - 基础配置</title>
      <link>http://www.mafool.com/posts/5c422e057c1204ac1f123660275788ae/</link>
      <pubDate>Sun, 13 Jan 2019 14:34:59 +0800</pubDate>
      
      <guid>http://www.mafool.com/posts/5c422e057c1204ac1f123660275788ae/</guid>
      <description>一. 基本模块 全局块： 配置影响nginx全局的指令。一般有运行nginx服务器的用户组，nginx进程pid存放路径，日志存放路径，配置文件引</description>
    </item>
    
    <item>
      <title>Nginx笔记 - 数据压缩</title>
      <link>http://www.mafool.com/posts/6b6d0da4906b7118c0b6dc8611cc399c/</link>
      <pubDate>Sun, 13 Jan 2019 14:34:59 +0800</pubDate>
      
      <guid>http://www.mafool.com/posts/6b6d0da4906b7118c0b6dc8611cc399c/</guid>
      <description>前言 gzip是nginx服务器的ngx_http_gzip_module模块提供的在线实时数据压缩功能。通过开启gzip功能，可对服务器响应</description>
    </item>
    
  </channel>
</rss>
