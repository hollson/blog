<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2020 on 码夫庄园</title>
    <link>http://www.mafool.com/archives/2020/</link>
    <description>Recent content in 2020 on 码夫庄园</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>版权所有</copyright>
    <lastBuildDate>Wed, 02 Dec 2020 22:03:06 +0800</lastBuildDate>
    
        <atom:link href="http://www.mafool.com/archives/2020/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go语言中的原子操作</title>
      <link>http://www.mafool.com/posts/0742b474a643d63a774461726a6201203/</link>
      <pubDate>Wed, 02 Dec 2020 22:03:06 +0800</pubDate>
      
      <guid>http://www.mafool.com/posts/0742b474a643d63a774461726a6201203/</guid>
      <description>原子操作 原子操作中，针对某个值的操作，CPU不会再去进行其他的操作。为了实现这样的严谨性，原子操作仅会由一个独立的CPU指令代表和完成。原子</description>
    </item>
    
    <item>
      <title>Go基础笔记 - 2.3 常量</title>
      <link>http://www.mafool.com/posts/1600330472/</link>
      <pubDate>Thu, 10 Sep 2020 21:36:02 +0800</pubDate>
      
      <guid>http://www.mafool.com/posts/1600330472/</guid>
      <description>[TOC] 一. 关于常量 常量有：显示常量、隐式常量、全局常量、局部常量、编译时常量。 常量只能是布尔型，数字型(整型，浮点型和复数)和字符串类型。 常量是</description>
    </item>
    
    <item>
      <title>Go - Gin框架快速入门</title>
      <link>http://www.mafool.com/posts/15996311192/</link>
      <pubDate>Wed, 09 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>http://www.mafool.com/posts/15996311192/</guid>
      <description>[TOC] 一. 路由 单路由 分组路由 自定义路由 二. 请求 Query参数 Body参数 Method 方法 安全性 说明 GET 安全、幂等 用于获取资源 HEAD 安全、幂等 只返回头部信息 POST 非安</description>
    </item>
    
    <item>
      <title>17. Go语言database/sql接口</title>
      <link>http://www.mafool.com/post/1597480217/</link>
      <pubDate>Fri, 14 Aug 2020 00:00:00 +0800</pubDate>
      
      <guid>http://www.mafool.com/post/1597480217/</guid>
      <description>[TOC] 一、database/sql接口 Go语言官方没有提供数据库驱动，而是为开发数据库驱动定义了标准数据库驱动接口database/sql，开发</description>
    </item>
    
    <item>
      <title>18. Go语言MySQL数据库操作</title>
      <link>http://www.mafool.com/post/1597480218/</link>
      <pubDate>Fri, 14 Aug 2020 00:00:00 +0800</pubDate>
      
      <guid>http://www.mafool.com/post/1597480218/</guid>
      <description>[TOC] 一、MySQL安装驱动 Go官方没有提供数据库驱动，最常用的开源MySQL数据库驱动非Go-MySQL-Driver莫属: 维护比较好。 完全支</description>
    </item>
    
    <item>
      <title>Gorm快速指南</title>
      <link>http://www.mafool.com/post/1597480249/</link>
      <pubDate>Fri, 14 Aug 2020 00:00:00 +0800</pubDate>
      
      <guid>http://www.mafool.com/post/1597480249/</guid>
      <description>[TOC] Gorm介绍 Github Gorm是一个使用Go语言编写的ORM框架。中文官方网站内含十分齐全的中文文档 ，对开发者友好，支持主流数据库。 安装Gorm：</description>
    </item>
    
    <item>
      <title>Option编程模式</title>
      <link>http://www.mafool.com/posts/848cd59ca42c13602cf7b0ddf6ca1d1f/</link>
      <pubDate>Thu, 09 Jul 2020 21:34:07 +0800</pubDate>
      
      <guid>http://www.mafool.com/posts/848cd59ca42c13602cf7b0ddf6ca1d1f/</guid>
      <description>什么是Option模式 Option模式的专业术语为：Functional Options Pattern（函数式选项模式） Option模式为golang的开</description>
    </item>
    
    <item>
      <title>PostgreSQL&#43;Pgpool实现HA主备切换</title>
      <link>http://www.mafool.com/posts/4a08ebfa30e31cfbc6f0e1305fb21fdb/</link>
      <pubDate>Mon, 06 Jul 2020 17:32:52 +0800</pubDate>
      
      <guid>http://www.mafool.com/posts/4a08ebfa30e31cfbc6f0e1305fb21fdb/</guid>
      <description></description>
    </item>
    
    <item>
      <title>安装Postgresql数据库</title>
      <link>http://www.mafool.com/posts/postgresql-install/</link>
      <pubDate>Mon, 06 Jul 2020 16:35:12 +0800</pubDate>
      
      <guid>http://www.mafool.com/posts/postgresql-install/</guid>
      <description>1. Yum安装 参考官方安装向导 。 1 2 3 4 5 6 7 8 9 10 11 12 13 # 安装服务(CENTOS7) yum install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm yum install -y postgresql96-server /usr/pgsql-9.6/bin/postgresql96-setup initdb systemctl enable postgresql-9.6 systemctl start postgresql-9.6 #查看服务 psql --version ps -ef|grep postgres # 卸</description>
    </item>
    
    <item>
      <title>Git入门</title>
      <link>http://www.mafool.com/posts/36c29462cec19ee3cad6610506ea56dd/</link>
      <pubDate>Thu, 21 May 2020 11:28:22 +0800</pubDate>
      
      <guid>http://www.mafool.com/posts/36c29462cec19ee3cad6610506ea56dd/</guid>
      <description>https://oscimg.oschina.net/oscnet/99c82f109b10b170870caff0690c69d2588.jpg Git 仓库 1.1Git 基本概念 ​ 在Git中，我们将需要进行版本控制的文件目录叫做一个仓库（repository），每个仓库可以简单理解成一个目录，这个目</description>
    </item>
    
    <item>
      <title>Go基础笔记 - 2.2 作用域</title>
      <link>http://www.mafool.com/posts/1600334132/</link>
      <pubDate>Sun, 10 May 2020 21:36:02 +0800</pubDate>
      
      <guid>http://www.mafool.com/posts/1600334132/</guid>
      <description>[TOC] 变量作用域 Golang有四个作用域：全局作用域、函数作用域、语句作用域和块内作用域。 1 2 3 4 5 6 7 8 9 var a string = &amp;#34;hello&amp;#34; //1.全局作用域（字符串</description>
    </item>
    
    <item>
      <title>Jenkins- 构建Go项目</title>
      <link>http://www.mafool.com/posts/199ea5b7cf7372f8ce9886fdbd3d6aae/</link>
      <pubDate>Tue, 21 Apr 2020 01:44:07 +0800</pubDate>
      
      <guid>http://www.mafool.com/posts/199ea5b7cf7372f8ce9886fdbd3d6aae/</guid>
      <description>前言 Jenkins是一款流行的开源持续集成（Continuous Integration）工具，广泛用于项目开发，具有自动化构建、测试和部署等</description>
    </item>
    
    <item>
      <title>Go - 内存分配原理</title>
      <link>http://www.mafool.com/posts/4f1b039fa5fd1a09e83a47bfac1fef0f/</link>
      <pubDate>Tue, 14 Apr 2020 16:53:27 +0800</pubDate>
      
      <guid>http://www.mafool.com/posts/4f1b039fa5fd1a09e83a47bfac1fef0f/</guid>
      <description>深入理解GO语言之内存详解 一. 前言 Go语言内置运行时（就是runtime），抛弃了传统的内存分配方式，改为自主管理。这样可以自主地实现更好的</description>
    </item>
    
    <item>
      <title>Go - 实现布隆过滤器</title>
      <link>http://www.mafool.com/posts/6f1ada1f5080f30710343b9d9c36592f/</link>
      <pubDate>Mon, 13 Apr 2020 00:49:27 +0800</pubDate>
      
      <guid>http://www.mafool.com/posts/6f1ada1f5080f30710343b9d9c36592f/</guid>
      <description>1. 概念 布隆过滤器（Bloom Filter） 是由 Howard Bloom在1970年提出的二进制向量数据结构，它具有很好的空间和时间效率，被用来检测一个元</description>
    </item>
    
    <item>
      <title>Linux - 四种IO模型简介</title>
      <link>http://www.mafool.com/posts/4a72f077ca65b5f3952d202fa0edf421/</link>
      <pubDate>Sat, 11 Apr 2020 17:22:24 +0800</pubDate>
      
      <guid>http://www.mafool.com/posts/4a72f077ca65b5f3952d202fa0edf421/</guid>
      <description>IO模型 服务器端编程经常需要构造高性能的IO模型，常见的IO模型有四种： 同步阻塞IO（Blocking IO）：即传统的IO模型。 同步非阻塞I</description>
    </item>
    
    <item>
      <title>POSIX - 可移植操作系统接口</title>
      <link>http://www.mafool.com/posts/518ce644178d75ca09829c29bee8341b/</link>
      <pubDate>Sat, 11 Apr 2020 12:09:16 +0800</pubDate>
      
      <guid>http://www.mafool.com/posts/518ce644178d75ca09829c29bee8341b/</guid>
      <description>什么是POSIX POSIX表示可移植操作系统接口（Portable Operating System Interface of UNIX，缩写为 POSIX ），POSIX标准定义了操作系统应该为应用程序提</description>
    </item>
    
    <item>
      <title>字典树详解与实现</title>
      <link>http://www.mafool.com/posts/0aa0b471cae5bf3523c8de46d7f37c60/</link>
      <pubDate>Fri, 10 Apr 2020 23:12:20 +0800</pubDate>
      
      <guid>http://www.mafool.com/posts/0aa0b471cae5bf3523c8de46d7f37c60/</guid>
      <description>前言 在计算机科学中，trie又称前缀树或字典树，是一种有序树，用于保存关联数组，其中的键通常是字符串。与二叉查找树不同，键不是直接保存在节点</description>
    </item>
    
    <item>
      <title>「转」Go并发之优雅退出</title>
      <link>http://www.mafool.com/posts/0742b474a643d63a774461726a6d328c/</link>
      <pubDate>Fri, 10 Apr 2020 22:03:06 +0800</pubDate>
      
      <guid>http://www.mafool.com/posts/0742b474a643d63a774461726a6d328c/</guid>
      <description>前言 goroutine作为Golang并发的核心，我们不仅要关注它们的创建和管理，当然还要关注如何合理的退出这些协程，不（合理）退出不然可能</description>
    </item>
    
    <item>
      <title>Docker之Dockerfile详解</title>
      <link>http://www.mafool.com/posts/97029d3d3c08b182359e59ed692f17a4/</link>
      <pubDate>Thu, 09 Apr 2020 00:26:35 +0800</pubDate>
      
      <guid>http://www.mafool.com/posts/97029d3d3c08b182359e59ed692f17a4/</guid>
      <description>一. 基础命令： 1. FROM：基础镜像 1 2 3 4 5 6 # 注释部分 FROM ubuntu:14.04 MAINTAINER Hollson &amp;#34;hollson@qq.com&amp;#34; RUN apt-get update RUN apt-get install -y nginx EXPOSE 80 2. MAINTAINER：作者信息 1 MAINTAINER Hollson &amp;#34;hollson@qq.com&amp;#34; 3. RUN：指定</description>
    </item>
    
    <item>
      <title>分布式系统概述</title>
      <link>http://www.mafool.com/posts/d40cede24573717edfd927aad8bb5042/</link>
      <pubDate>Wed, 08 Apr 2020 22:26:52 +0800</pubDate>
      
      <guid>http://www.mafool.com/posts/d40cede24573717edfd927aad8bb5042/</guid>
      <description>前言 说起分布式系统，我们就不得不说下分布式系统的祖先——集中式系统。集中式系统跟分布式系统是完全相反的两个概念。集中式系统就是把所有的程序、</description>
    </item>
    
    <item>
      <title>深入解读unsafe包</title>
      <link>http://www.mafool.com/post/1586082803/</link>
      <pubDate>Sun, 05 Apr 2020 00:00:00 +0800</pubDate>
      
      <guid>http://www.mafool.com/post/1586082803/</guid>
      <description>一. 关于 unsafe 包 Unsafe 包主要用于指针计算和指针类型转换(具体可以查阅unsafe 源码或unsafe 文档）。unsafe 包源码如下： 1 2 3 4 5 6 7 8 9</description>
    </item>
    
    <item>
      <title>Go中的正则表达式</title>
      <link>http://www.mafool.com/post/1585727755/</link>
      <pubDate>Wed, 01 Apr 2020 00:00:00 +0800</pubDate>
      
      <guid>http://www.mafool.com/post/1585727755/</guid>
      <description>一. 正则规范 Go正则表达式语法与Perl、Python等语言一样，都采用了RE2语法规范。RE2的目标是能够处理来自不受信任用户的正则表达式</description>
    </item>
    
    <item>
      <title>Mysql的乐观锁与悲观锁</title>
      <link>http://www.mafool.com/post/1585752015/</link>
      <pubDate>Wed, 01 Apr 2020 00:00:00 +0800</pubDate>
      
      <guid>http://www.mafool.com/post/1585752015/</guid>
      <description>一. 悲观锁(PCC) 悲观锁概念 在关系数据库管理系统里，悲观并发控制（又名“悲观锁”，Pessimistic Concurrency Control，缩写“PCC”）</description>
    </item>
    
    <item>
      <title>「转」服务器雪崩的场景与解决方案</title>
      <link>http://www.mafool.com/post/1585745291/</link>
      <pubDate>Wed, 01 Apr 2020 00:00:00 +0800</pubDate>
      
      <guid>http://www.mafool.com/post/1585745291/</guid>
      <description>什么是应用服务雪崩 雪崩问题 分布式系统都存在这样一个问题，由于网络的不稳定性，决定了任何一个服务的可用性都不是 100% 的。当网络不稳定的时候，作为服</description>
    </item>
    
    <item>
      <title>Go语言之细节决定成败</title>
      <link>http://www.mafool.com/post/1585588756/</link>
      <pubDate>Tue, 31 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>http://www.mafool.com/post/1585588756/</guid>
      <description>[TOC] 1.变量 全局变量不能使用类型推导 2.常量 常量属于硬编码(即当作指令数据)，所以不能取地址 1 2 3 4 const a = 100 func main() { fmt.Println(&amp;amp;a,a) } 1 2 3 4 5 6 7 8 9 10 11 const</description>
    </item>
    
    <item>
      <title>Istio入门系列-Istio介绍</title>
      <link>http://www.mafool.com/post/1585546631/</link>
      <pubDate>Mon, 30 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>http://www.mafool.com/post/1585546631/</guid>
      <description>istio 简介 官网教程。 istio 相关文章列表： istio 简介 istio 性能测试 istio 是什么 Istio 提供一种简单的方式来为已部署的服务建立网络，该网络具有负载均衡、服务间认证、监控等</description>
    </item>
    
    <item>
      <title>深度解密Go语言之map</title>
      <link>http://www.mafool.com/post/1585573653/</link>
      <pubDate>Mon, 30 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>http://www.mafool.com/post/1585573653/</guid>
      <description>前言 Hash table 是计算机数据结构中一个最重要的设计。大部分hash table都实现了快速查找、添加、删除的功能，Go 语言内置的 map 实现了上述所有功能。</description>
    </item>
    
    <item>
      <title>深度解密Go语言之slice</title>
      <link>http://www.mafool.com/post/1585577658/</link>
      <pubDate>Mon, 30 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>http://www.mafool.com/post/1585577658/</guid>
      <description>源码 1 open -a goland $GOROOT/src/runtime/slice.go 源码简读 原型 1 2 3 4 5 type slice struct { array unsafe.Pointer len int cap int } make操作 经常被问到new和make读区别，来看一看到底干来啥 1 2 3 4 5 6 7 8 9</description>
    </item>
    
    <item>
      <title>Linux Bash终端设置代理访问</title>
      <link>http://www.mafool.com/posts/1585335064/</link>
      <pubDate>Sat, 28 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>http://www.mafool.com/posts/1585335064/</guid>
      <description>Linux bash终端设置代理（proxy）访问 Linux是开源操作系统，有很多软件包需要从国外网站上下载，而其中大部分国外网站是被墙的，这时我们需</description>
    </item>
    
    <item>
      <title>Hugo创建站内搜索引擎</title>
      <link>http://www.mafool.com/2020/03/hugo%E5%88%9B%E5%BB%BA%E7%AB%99%E5%86%85%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/</link>
      <pubDate>Sun, 22 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>http://www.mafool.com/2020/03/hugo%E5%88%9B%E5%BB%BA%E7%AB%99%E5%86%85%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/</guid>
      <description>目标是建立静态站点搜索： 无需在计算机上安装任何JS模块 不索引停用词，即“和，或与……”之类的词 逐页索引单词（无重复） 您下一个创建的页面将自动</description>
    </item>
    
    <item>
      <title>使用Hugo搭建静态博客</title>
      <link>http://www.mafool.com/2020/03/%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Sun, 22 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>http://www.mafool.com/2020/03/%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/</guid>
      <description>Hugo介绍 Hugo是由Go语言实现的静态网站生成器。简单、易用、高效、易扩展、快速部署。 安装Hugo 1 2 3 4 5 6 # Mac安装 $ brew install hugo # 查看</description>
    </item>
    
    <item>
      <title>用Go实现一个数学表达式计算引擎</title>
      <link>http://www.mafool.com/2020/03/%E7%94%A8go%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E6%95%B0%E5%AD%A6%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%AE%A1%E7%AE%97%E5%BC%95%E6%93%8E/</link>
      <pubDate>Sun, 22 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>http://www.mafool.com/2020/03/%E7%94%A8go%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E6%95%B0%E5%AD%A6%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%AE%A1%E7%AE%97%E5%BC%95%E6%93%8E/</guid>
      <description>用Go实现一个数学表达式计算引擎 deng-dev 发布在 10个月前 更新于 4个月前 算法计算引擎ASTGo math-engine-demo 导读 这篇文章将从头开始，使用 Go 语言来实现一个完整的数</description>
    </item>
    
    <item>
      <title>Go之Logrus日志框架</title>
      <link>http://www.mafool.com/2020/03/go%E4%B9%8Blogrus%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/</link>
      <pubDate>Thu, 19 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>http://www.mafool.com/2020/03/go%E4%B9%8Blogrus%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/</guid>
      <description>logrus介绍 golang标准库的日志框架非常简单，仅仅提供了print，panic和fatal三个函数。对于更精细的日志级别、日志文件分</description>
    </item>
    
    <item>
      <title>Go之命令行工具教程</title>
      <link>http://www.mafool.com/2020/03/go%E4%B9%8B%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7%E6%95%99%E7%A8%8B/</link>
      <pubDate>Thu, 19 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>http://www.mafool.com/2020/03/go%E4%B9%8B%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7%E6%95%99%E7%A8%8B/</guid>
      <description>[TOC] 一. 命令行预览 Go命令行使用二级命令，格式go &amp;lt;command&amp;gt; [arguments] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44</description>
    </item>
    
    <item>
      <title>Etcd - 搭建伪集群</title>
      <link>http://www.mafool.com/posts/aff3b81a3477dddf3a0e9115dd348b11/</link>
      <pubDate>Fri, 13 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>http://www.mafool.com/posts/aff3b81a3477dddf3a0e9115dd348b11/</guid>
      <description>一. ETCD简介 Etcd是CoreOS团队于2013年6月发起的开源项目，它的目标是构建一个高可用的分布式键值(key-value)数据库。</description>
    </item>
    
    <item>
      <title>sync.errgroup 源码解读</title>
      <link>http://www.mafool.com/posts/f0e1186f6b7f094003d14539f38425d6/</link>
      <pubDate>Sun, 08 Mar 2020 21:38:42 +0800</pubDate>
      
      <guid>http://www.mafool.com/posts/f0e1186f6b7f094003d14539f38425d6/</guid>
      <description>前言 在启动多个Go协程并发的时候，处理子协程的异常是一件麻烦的事，你可能得需要通过多个类似&amp;lt;-error.New(...)向main协</description>
    </item>
    
    <item>
      <title>Go之接口解读</title>
      <link>http://www.mafool.com/posts/09f6faa09d79344eba8fcef184997d68/</link>
      <pubDate>Sat, 07 Mar 2020 23:26:48 +0800</pubDate>
      
      <guid>http://www.mafool.com/posts/09f6faa09d79344eba8fcef184997d68/</guid>
      <description>1.2 接口 Go 语言中的接口就是一组方法的签名，它是 Go 语言的重要组成部分。使用接口能够让我们更好地组织并写出易于测试的代码，然而很多工程师对 Go 的接口</description>
    </item>
    
    <item>
      <title>CSS框架Bulma教程</title>
      <link>http://www.mafool.com/2020/02/css%E6%A1%86%E6%9E%B6bulma%E6%95%99%E7%A8%8B/</link>
      <pubDate>Fri, 21 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>http://www.mafool.com/2020/02/css%E6%A1%86%E6%9E%B6bulma%E6%95%99%E7%A8%8B/</guid>
      <description>Bulma是一个比Bootstrap 更轻量化、更易用的CSS框架。有了它，即使完全不懂 CSS，也可以轻而易举做出美观的网页。 一、简介 Bulm</description>
    </item>
    
    <item>
      <title>「转」图解go反射实现原理</title>
      <link>http://www.mafool.com/posts/1f880505b15bc9af30837c3286fdd2c5/</link>
      <pubDate>Mon, 17 Feb 2020 01:38:43 +0800</pubDate>
      
      <guid>http://www.mafool.com/posts/1f880505b15bc9af30837c3286fdd2c5/</guid>
      <description>https://i6448038.github.io/tags/golang/) Go反射的实现和interface和unsafe.Pointer密切相关。如果对golang的interface底层实现还没有理解，可以去</description>
    </item>
    
    <item>
      <title>Kafka环境部署</title>
      <link>http://www.mafool.com/post/1585728530/</link>
      <pubDate>Mon, 03 Feb 2020 00:00:00 +0800</pubDate>
      
      <guid>http://www.mafool.com/post/1585728530/</guid>
      <description>一. 搭建Zookeeper 参考Zookeeper安装教程 1 2 3 $ jps 1699 QuorumPeerMain # zookeeper进程 1702 Jps 二. 搭建单机Kafka 1. 下载Kafka： 参</description>
    </item>
    
    <item>
      <title>Redis为什么这么快</title>
      <link>http://www.mafool.com/posts/ce39f185a4105efee0e4d06d943f2d28/</link>
      <pubDate>Sat, 11 Jan 2020 00:29:11 +0800</pubDate>
      
      <guid>http://www.mafool.com/posts/ce39f185a4105efee0e4d06d943f2d28/</guid>
      <description>当然，将数据存储在内存中，读取的时候不需要进行磁盘的 IO，单线程也保证了系统没有线程的上下文切换。 但这两点只是 Redis 高性能原因的很小一部分，下面</description>
    </item>
    
    <item>
      <title>Go操作Zookeeper</title>
      <link>http://www.mafool.com/post/1585819046/</link>
      <pubDate>Wed, 08 Jan 2020 00:00:00 +0800</pubDate>
      
      <guid>http://www.mafool.com/post/1585819046/</guid>
      <description>一. ZK集群连接对象 可以使用zk.WithXXX函数创建私有Option闭包对象，，然后以回调函数的方式传递(注入)给ZK连接方法。 With</description>
    </item>
    
    <item>
      <title>JWT实现认证授权</title>
      <link>http://www.mafool.com/post/1585829952/</link>
      <pubDate>Thu, 02 Jan 2020 00:00:00 +0800</pubDate>
      
      <guid>http://www.mafool.com/post/1585829952/</guid>
      <description>一. JWT是什么 JSON Web Token（JWT）是目前最流行的跨域身份验证解决方案。简单说，OAuth 就是一种授权机制, 数据的所有者告诉系统，同意授</description>
    </item>
    
    <item>
      <title>Redis哨兵模式和集群搭建</title>
      <link>http://www.mafool.com/post/1585749845/</link>
      <pubDate>Fri, 01 Nov 2019 00:00:00 +0800</pubDate>
      
      <guid>http://www.mafool.com/post/1585749845/</guid>
      <description>参考链接 https://zhangweisep.github.io/2018/09/26/Redis%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F%E5%92%8C%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/ https://segmentfault.com/a/1190000021622469 https://phachon.com/redis/redis-2.html http://objcoding.com/2019/01/17/redis-sentinel/ http://www.throwable.club/2019/10/07/redis-server-sentinel-install-guide/</description>
    </item>
    
    <item>
      <title>「转」MySQL慢查询优化、索引优化、以及表等优化总结</title>
      <link>http://www.mafool.com/post/1585905443/</link>
      <pubDate>Mon, 09 Sep 2019 00:00:00 +0800</pubDate>
      
      <guid>http://www.mafool.com/post/1585905443/</guid>
      <description>MySQL优化概述 MySQL数据库常见的两个瓶颈是：CPU和I/O的瓶颈。 CPU在饱和的时候一般发生在数据装入内存或从磁盘上读取数据时候。 磁</description>
    </item>
    
    <item>
      <title>「转」Go之优雅代码之道</title>
      <link>http://www.mafool.com/posts/d780d847caf0f29efb743f0ae0c8d2aa/</link>
      <pubDate>Wed, 07 Aug 2019 23:21:42 +0800</pubDate>
      
      <guid>http://www.mafool.com/posts/d780d847caf0f29efb743f0ae0c8d2aa/</guid>
      <description>[TOC] 如何写出优雅的 Go 语言代码 2019-05-30GolangGo代码规范单元测试最佳实践接口 Go 语言是一门简单、易学的编程语言，对于有编程背景的</description>
    </item>
    
    <item>
      <title>Zookeeper集群部署</title>
      <link>http://www.mafool.com/post/1585818342/</link>
      <pubDate>Thu, 02 May 2019 00:00:00 +0800</pubDate>
      
      <guid>http://www.mafool.com/post/1585818342/</guid>
      <description>一. Zookeeper要点 zookeeper开放源码的分布式协调服务框架 ； zookeeper功能包括：配置维护、域名服务、分布式锁、组服务等</description>
    </item>
    
    <item>
      <title>日常工作中的正则表达式</title>
      <link>http://www.mafool.com/post/1585727291/</link>
      <pubDate>Mon, 01 Apr 2019 00:00:00 +0800</pubDate>
      
      <guid>http://www.mafool.com/post/1585727291/</guid>
      <description>1. VS code替换行尾字符 替换行尾双星号 1 \*\*r?$</description>
    </item>
    
    <item>
      <title>接口转换的原理</title>
      <link>http://www.mafool.com/post/1585590232/</link>
      <pubDate>Mon, 31 Dec 2018 00:00:00 +0800</pubDate>
      
      <guid>http://www.mafool.com/post/1585590232/</guid>
      <description>通过前面提到的 iface 的源码可以看到，实际上它包含接口的类型 interfacetype 和 实体类型的类型 _type，这两者都是 iface 的字段 itab 的成员。也就是说生成一个 itab 同时需要接</description>
    </item>
    
    <item>
      <title>类型转换和断言的区别</title>
      <link>http://www.mafool.com/post/1585590231/</link>
      <pubDate>Mon, 31 Dec 2018 00:00:00 +0800</pubDate>
      
      <guid>http://www.mafool.com/post/1585590231/</guid>
      <description>Go 语言中不允许隐式类型转换，也就是说 = 两边，不允许出现类型不相同的变量。 类型转换、类型断言本质都是把一个类型转换成另外一个类型。不同之处在于</description>
    </item>
    
    <item>
      <title>编译器自动检测类型是否实现接口</title>
      <link>http://www.mafool.com/post/1585590230/</link>
      <pubDate>Mon, 31 Dec 2018 00:00:00 +0800</pubDate>
      
      <guid>http://www.mafool.com/post/1585590230/</guid>
      <description>经常看到一些开源库里会有一些类似下面这种奇怪的用法： 1 var _ io.Writer = (*myWriter)(nil) 这时候会有点懵，不知道作者想要干什么，实际上这就是此问题的答案。编译器会由此</description>
    </item>
    
    <item>
      <title>数据排序之TopK问题</title>
      <link>http://www.mafool.com/posts/d6bafcadfff4b121d2d6f4bad1f1a5cb/</link>
      <pubDate>Mon, 10 Dec 2018 23:35:06 +0800</pubDate>
      
      <guid>http://www.mafool.com/posts/d6bafcadfff4b121d2d6f4bad1f1a5cb/</guid>
      <description>数据排序之TopK问题 前言 在大规模数据处理中，常遇到的一类问题是，在海量数据中找出出现频率最高的前K个数，或者从海量数据中找出最大的前K个数</description>
    </item>
    
    <item>
      <title>面试题汇总</title>
      <link>http://www.mafool.com/posts/99a7e89b9b8052e68f39909ef7fc0fc1/</link>
      <pubDate>Sat, 11 Aug 2018 00:13:00 +0800</pubDate>
      
      <guid>http://www.mafool.com/posts/99a7e89b9b8052e68f39909ef7fc0fc1/</guid>
      <description>[TOC] 1. Golang中除了加Mutex锁以外还有哪些方式安全读写共享变量？ Golang中Goroutine 可以通过 Channel 进行安全读写共享变量。 2. 无缓</description>
    </item>
    
    <item>
      <title>Java环境部署</title>
      <link>http://www.mafool.com/post/1585671937/</link>
      <pubDate>Thu, 09 Aug 2018 00:00:00 +0800</pubDate>
      
      <guid>http://www.mafool.com/post/1585671937/</guid>
      <description>安装JRE/JDK 官网 JRE： http://www.oracle.com/technetwork/java/javase/downloads/server-jre8-downloads-2133154.html 网盘 JDK： http://pan.baidu.com/s/1i4LeazV 网盘 JRE： http://pan.baidu.com/s/1i5p7NfR 需要点击Accept License Agreement ，获取临时授权下载地址 可选择通版本或服务器版的jre，J</description>
    </item>
    
    <item>
      <title>Yaml基础语法示例</title>
      <link>http://www.mafool.com/post/1585672788/</link>
      <pubDate>Tue, 01 May 2018 00:00:00 +0800</pubDate>
      
      <guid>http://www.mafool.com/post/1585672788/</guid>
      <description>在线Demo： http://nodeca.github.io/js-yaml 语法规则 大小写敏感 符号加空格▲ 用缩进表示层级 左对齐表示同级 禁止制表符 井号表示注释 减号表示序列符 冒号表示键值符 大于号折行 双叹号</description>
    </item>
    
  </channel>
</rss>
