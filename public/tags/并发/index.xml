<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>并发 on 码夫庄园</title>
    <link>https://hollson.github.io/tags/%E5%B9%B6%E5%8F%91/</link>
    <description>Recent content in 并发 on 码夫庄园</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>版权所有</copyright>
    <lastBuildDate>Fri, 10 Apr 2020 22:03:06 +0800</lastBuildDate>
    
        <atom:link href="https://hollson.github.io/tags/%E5%B9%B6%E5%8F%91/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>「转」Go并发之优雅退出</title>
      <link>https://hollson.github.io/posts/0742b474a643d63a774461726a6d328c/</link>
      <pubDate>Fri, 10 Apr 2020 22:03:06 +0800</pubDate>
      
      <guid>https://hollson.github.io/posts/0742b474a643d63a774461726a6d328c/</guid>
      <description>前言 goroutine作为Golang并发的核心，我们不仅要关注它们的创建和管理，当然还要关注如何合理的退出这些协程，不（合理）退出不然可能</description>
    </item>
    
    <item>
      <title>Mysql的乐观锁与悲观锁</title>
      <link>https://hollson.github.io/post/1585752015/</link>
      <pubDate>Wed, 01 Apr 2020 00:00:00 +0800</pubDate>
      
      <guid>https://hollson.github.io/post/1585752015/</guid>
      <description>一. 悲观锁(PCC) 悲观锁概念 在关系数据库管理系统里，悲观并发控制（又名“悲观锁”，Pessimistic Concurrency Control，缩写“PCC”）</description>
    </item>
    
    <item>
      <title>Go并发1-并发模型</title>
      <link>https://hollson.github.io/post/1585677184/</link>
      <pubDate>Thu, 19 Dec 2019 00:00:00 +0800</pubDate>
      
      <guid>https://hollson.github.io/post/1585677184/</guid>
      <description>[TOC] 一. 并发概念 1. 多核CPU 单核CPU主频接近4GHz时遇到瓶颈(能耗和散热),所以2005年4月Intel推出第一次双核奔腾CPU。 多核CP</description>
    </item>
    
    <item>
      <title>Go并发2-同步编程</title>
      <link>https://hollson.github.io/post/1585677428/</link>
      <pubDate>Thu, 19 Dec 2019 00:00:00 +0800</pubDate>
      
      <guid>https://hollson.github.io/post/1585677428/</guid>
      <description>[TOC] Sync包简述： Package sync provides basic synchronization primitives such as mutual exclusion locks. Other than the Once and WaitGroup types, most are intended for use by low-level library &amp;gt; routines. Higher-level synchronization is better done via channels and communication. Values containing the types defined in this package should not be copied. Sync包同步提供基本的</description>
    </item>
    
    <item>
      <title>Go并发3-Channel进程通信</title>
      <link>https://hollson.github.io/post/1585855719/</link>
      <pubDate>Tue, 08 Oct 2019 00:00:00 +0800</pubDate>
      
      <guid>https://hollson.github.io/post/1585855719/</guid>
      <description>不同于传统的多线程并发模型使用共享内存来实现线程间通信的方式，golang 的哲学是通过 channel 进行协程(goroutine)之间的通信来实现数据共</description>
    </item>
    
    <item>
      <title>Go并发4-Context</title>
      <link>https://hollson.github.io/post/1585856050/</link>
      <pubDate>Mon, 07 Oct 2019 00:00:00 +0800</pubDate>
      
      <guid>https://hollson.github.io/post/1585856050/</guid>
      <description>关于Context： 在WebServer中，每个请求都对应一个goroutine，同时还会启动若干goroutine去处理后端业务，如数据库</description>
    </item>
    
  </channel>
</rss>
